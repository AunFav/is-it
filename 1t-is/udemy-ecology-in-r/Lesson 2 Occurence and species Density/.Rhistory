setwd("C:/GitHub/is-it/sky-cctv/resource/Udemy-Ecology-in-R/Lesson 2 Occurence and species Density")
#Now we open the packages we installed, and one from the previous lesson
library(rgbif)
library(mapview)
library(scrubr)
# use the question mark and occ_search to check examples then copy and paste
# relevant code for what we want to do
?occ_search
# Pull records on a family from GBIF
key <- name_suggest(q='Pythonidae', rank='family')$data$key[1]
# Pull records on a family from GBIF
key <- name_suggest(q='Pythonidae', rank='family')$data$key[1]
# Show metadata of records for Pythonidae in the database
occ_search(taxonKey=key, limit=0)$meta$count
# Pulls your data from GBIF, limit to 200 records as an example dataset
spdat <- occ_search(taxonKey = key, return = "data", limit = 200)
#pull out the data file
spdat <- spdat$data
View(spdat)
#view the data that was returned
View(spdat)
# WOW thats a lot of data! However, all we need right now is the latitude,
# Longitude, and Species name. Lets use the select() function from dplyr
# and store it in a data frame object called dat
# make sure you use the correct column names when using select()
dat <- select(spdat, decimalLatitude, decimalLongitude, species)
library(dplyr)
library(dplyr)
library(sp)
install.packages("sp")
install.packages("sp")
install.packages("scrubr")
install.packages("scrubr")
install_version("scrubr", ">= 0.4.0")
getOption("pkgType")
devtools::install_version("scrubr", version = "0.4.0", type="source")
install.packages("devtools")
install_version("scrubr", ">= 0.4.0")
devtools::install_version("scrubr", version = "0.4.0", type="source")
install.packages(c("qlcMatrix", "fastmatch"))
install.packages("scrubr")
devtools::install_version("scrubr", version = "0.4.0", type="source")
library(vctrs)
detach("package:vctrs", unload = TRUE)
remove.packages("vctrs")
remove.packages("fansi")
devtools::install_version("scrubr", version = "0.4.0", type="source")
install.packages(c("vctrs", "fansi"))
install.packages(c("vctrs", "fansi"))
install.packages("scrubr")
r -V
r --version
r version
version
install.packages("C:/Users/cheun/Downloads/scrubr_0.4.0.tar.gz", repos = NULL, type = "source")
library(scrubr)
# WOW thats a lot of data! However, all we need right now is the latitude,
# Longitude, and Species name. Lets use the select() function from dplyr
# and store it in a data frame object called dat
# make sure you use the correct column names when using select()
dat <- select(spdat, decimalLatitude, decimalLongitude, species)
# WOW thats a lot of data! However, all we need right now is the latitude,
# Longitude, and Species name. Lets use the select() function from dplyr
# and store it in a data frame object called dat
# make sure you use the correct column names when using select()
dat <- select(spdat, decimalLatitude, decimalLongitude, species)
library(dplyr)
# WOW thats a lot of data! However, all we need right now is the latitude,
# Longitude, and Species name. Lets use the select() function from dplyr
# and store it in a data frame object called dat
# make sure you use the correct column names when using select()
dat <- select(spdat, decimalLatitude, decimalLongitude, species)
View(dat)
#Now we open the packages we installed, and one from the previous lesson
library(rgbif)
library(mapview)
library(scrubr)
library(sp)
library(dplyr)
# lets change the names of the columns so they are "lat", "lon" and "species"
colnames(dat) <- c("latitude", "longitude", "species")
# We should also clean the data of any useless NA values
dat <- na.omit(dat)
table(spdat$geodeticDatum) # this shows all our GPS data is WGS84
# For another example, lets get a count for how many occurence records
# we have per species in our "dat" data frame
table(dat$species) #show how many data records we have for each species
#clean your occurence records (search scrubr package for more options)
dat<-dframe(dat) %>% coord_impossible()
dat<-dframe(dat) %>% coord_unlikely()
# if you noticed, this function changed our lon and lat column names to
# "longitude" and "latitude". we could change this back with colnames()
# but lets instead just view our dataframe, and acknowledge what happened
View(dat)
# Back to our spatial data, this is where the "sp" package comes in
# lets create our spatial object and store it in a
# spatialpoints object called "sp".
# to do this, we combine or "cbind" our coordinates using the
# function "SpatialPoints()"
# for GPS coordinate system WGS84 in lat long, we use the
# CRS projection or "proj4string" +init=espg:4326
sp <- SpatialPoints(coords=cbind(dat$longitude, dat$latitude),
proj4string = CRS("+init=epsg:4326"))
sp # this calls sp to see what we've created
# now that we have our spatialdata object, lets add our species date to it
# and store it in a column feature called "species"
sp$species <- dat$species
mapview(sp) #plot our spatialpoints object "sp"
key <- name_suggest(q = "Pythonidae", rank = "family")$data$key[1]
occ_search(taxonKey=key, limit=0)$meta$count
# Pulls your data from GBIF, limit to 200 records with no invaisve species
spdat.new <- occ_search(taxonKey = key, return = "data",
limit = 200, establishmentMeans = "NATIVE")
View(spdat.new)
spdat.new <- spdat.new$data
# create our new dataframe
dat.new <- select(spdat.new, decimalLatitude, decimalLongitude, species)
rm(spdat.new)
library("sp", "raster", "usdm", "mapview", "rgbif", "scrubr", "GISTools", "maps", "ggplot2", "RColorBrewer", "ggspatial")
library("sp","raster","usdm","mapview","rgbif","scrubr","GISTools","maps","ggplot2","RColorBrewer","ggspatial")
library.packages("sp","raster","usdm","mapview","rgbif","scrubr","GISTools","maps","ggplot2","RColorBrewer","ggspatial")
install.packages("pacman")
library(pacman)
pacman::p_load(sp,raster,usdm,mapview,rgbif,scrubr,GISTools,maps,ggplot2,RColorBrewer,ggspatial)
library(sp)
library(raster)
library(usdm)
library(mapview)
library(rgbif)
library(scrubr)
library(GISTools)
install.packages("GIStools")
zipfile <- "C:/Users/cheun/Downloads/GISTools_0.7-4.zip"
install.packages(zipfile, repos = NULL, type = "source", lib = "C:/Users/cheun/AppData/Local/R/win-library/4.2")
library(GISTools)
install.packages("maptools")
library(GISTools)
install.packages("regos")
zipfile <- "C:/Users/cheun/Downloads/rego_1.5.2.zip"
install.packages(zipfile, repos = NULL, type = "source", lib = "C:/Users/cheun/AppData/Local/R/win-library/4.2")
library(GISTools)
