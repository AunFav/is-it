1 + 1 # press ctrl enter to see the answer in your console (window below)
5 + 5 # press ctrl enter to see the answer in your console (window below)
library(dplyr)
install.packages(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# assignment arrows and "=" store information in a given name
# the shortcut for assignment arrows is alt + -
# run all three of these lines below to see them stored in your
# "environment" window on the top right
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
#to combine vectors into rows, we use the "rbind()" function
combine.rows <- rbind(vector1, vector2, vector3)
vector3 <- c("hello", "goodbye", "hi", "bye", "hey")
#to combine vectors into rows, we use the "rbind()" function
combine.rows <- rbind(vector1, vector2, vector3)
combine.rows # run this to see what happened
#to combine vectors into columns, we use the "cbind()" function
combine.columns <- cbind(vector1, vector2, vector3)
combine.columns # run this to see what happened
# a data frame refers to a combination of rows and columns
# think of a data frame as an excel spreadsheet
# we want the three vectors as a 3 column data frame
# we can create a data frame by using the function "as.data.frame()"
# we can either use the already combined "combine.columns" data, or
# use cbind() with each of the vectors again
new.data.frame <- as.data.frame(combine.columns)
View(new.data.frame)
new.data.frame1 <- as.data.frame(cbind(vector1, vector2, vector3))
View(new.data.frame1)
View(new.data.frame1)
View(new.data.frame1)
# now say we want to view a specific column of values to our dataframe
# to do this we use the "$" after we call the data frame's name
# then we choose the column name we wish to view
new.data.frame$vector1 # this calls vector1 column
new.data.frame$vector2 # this calls vector2 column
new.data.frame$vector3 # this calls vector3 column
#create a new vector (of 5 random numbers) to add
vector4 <- c(26, 39, 12, 5, 14)
#add vector4 to the data frame
new.data.frame$vector4 <- vector4
View(new.data.frame)
View(new.data.frame1)
View(new.data.frame)
View(new.data.frame1)
View(new.data.frame)
# Now say we would like to change the column names
# so they make more sense with our data
# to do this we use the function "colnames()"
# since we have 5 columns now, we must name them all
# remember that all characters (words) must be inside quotations ""
colnames(new.data.frame) <- c("col1", "col2", "col3", "col4", "col5")
View(new.data.frame)
# Say we want to add another column of values to our dataframe
#to do this, we use the "$", name the new column, and assign it values
new.data.frame$ones <- 1 # this makes a column of 1s
# Now say we would like to change the column names
# so they make more sense with our data
# to do this we use the function "colnames()"
# since we have 5 columns now, we must name them all
# remember that all characters (words) must be inside quotations ""
colnames(new.data.frame) <- c("col1", "col2", "col3", "col4", "col5")
View(new.data.frame)
# what if we want to identify specific element(s) from a column and row?
# for this, we use square brackets [] with row number first, followed
# by the column number second
new.data.frame[2,3] #identify element on row 2, column 3 -- "goodbye"
new.data.frame[c(1,2), ] #identify all elements in rows 1 and 2
new.data.frame[ ,c(1,2)] #identify all elements in columns 1 and 2
new.data.frame[c(1:3), ] #identify all elements in rows 1 - 3
new.data.frame[ ,c(1:3)] #identify all elements in columns 1 - 3
# what if we didn't have data in that row (identified as NA)
new.data.frame[2,3] <- NA # assign NA to row, 2 column 3
View(new.data.frame) # see what happened
# what if we didn't want NA (non existing data) in our dataframe?
# how do we remove them?
# we can use the function "na.omit" which deleted the NA and all
# corresponding data (the row with the NA value)
#remove the NA from
new.data.frame <- na.omit(new.data.frame) #omit the NA
View(new.data.frame) # see what happened
#---------------------------------------------------------------
# one common issue when people are first using R is that they don't convert
# dates when they import their data. If R doesn't recognize dates, they will
# instead be recognized as numerical values.
# one easy way to convert dates in R is to use the package "lubridate"
install.packages("lubridate")
library(lubridate)
# now we add a list of dates to our data frame, lets say we have the
# format day/month/year
dates <- c("13/10/2019", "14/10/2019", "15/10/2019",
"16/10/2019", "17/10/2019") #make a vector of date values
new.data.frame$dates <- dates #add the vector to the data frame
# now we add a list of dates to our data frame, lets say we have the
# format day/month/year
dates <- c("13/10/2019", "14/10/2019", "15/10/2019",
"16/10/2019") #make a vector of date values
new.data.frame$dates <- dates #add the vector to the data frame
View(new.data.frame1)
View(new.data.frame1)
View(new.data.frame)
rm(new.data.frame1)
# to check the type of value in a column, we can use the "class()" function
# they should be identified as Date or "POSIXt"
class(new.data.frame$dates) #we see that our dates are characters
new.data.frame$col1 <- as.numeric(new.data.frame$col1)
# to check the type of value in a column, we can use the "class()" function
# they should be identified as Date or "POSIXt"
class(new.data.frame$col1) #we see that our dates are characters
# now we can recognize them as dates using
# the lubridate function as.POSIXct()
# when we call the "format =" argument, we have to use %d %m and %y
# in the correct order, corresponding to how our data is set up.
# also, the delimiter "/" or "-" must also be correct
new.data.frame$dates <- as.POSIXct(new.data.frame$dates,
format = "%d-%m-%Y")
new.data.frame$dates <- dates #add the vector to the data frame
new.data.frame$dates <- as.POSIXct(new.data.frame$dates,
format = "%d/%m/%Y")
# in order to select specific columns to keep in a dataframe, we
# can simply use the "select()" function from the dplyr package
# lets only select columns col1, col3, and col5 and store them
# in a dataframe object called dat.1
dat.1 <- select(new.data.frame, col1, col3, col5)
View(dat.1)# now check what we've done
colnames(dat.1) <- ("col1", "col2", "col3")
colnames(dat.1) <- c("col1", "col2", "col3")
# the first thing you should do when starting any new project is to set
# your working directory. This means setting your R environment to the
# correct folder on your computer.
# to do this, we use the function "setwd()"
# go to the folder you wish to set your working directory to and copy/paste
# the folder path in setwd(). Remember to 1) encompass the path in quotations
# and 2) change the forward brackets to backwards brackets if necessary \ to /
setwd("C:/Users/cheun/OneDrive/Desktop/Ecology in R/Lesson 1 Introduction")
# now lets set up some dummy data from the last 2 lessons
# we won't change the dates using the lubridate package
# for this excersise
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
vector3 <- c("hello", "goodbye", "hi", "bye", "hey")
combine.columns <- cbind(vector1, vector2, vector3)
new.data.frame <- as.data.frame(combine.columns)
new.data.frame$ones <- 1
vector4 <- c(26, 39, 12, 5, 14)
new.data.frame$vector4 <- vector4
colnames(new.data.frame) <- c("col1", "col2", "col3", "col4", "col5")
dates <- c("13/10/2019", "14/10/2019", "15/10/2019",
"16/10/2019", "17/10/2019")
new.data.frame$dates <- dates
View(new.data.frame)
# lets save this new data frame we created in our folder as a .csv file
# we do this using the write.csv() function, with our data frame's name
# first, followed by what we want the file name to be called
# NOTE: don't forget to add .csv to the file name!
write.csv(new.data.frame, "dataframe_file.csv")
# lets save this new data frame we created in our folder as a .csv file
# we do this using the write.csv() function, with our data frame's name
# first, followed by what we want the file name to be called
# NOTE: don't forget to add .csv to the file name!
write.csv(new.data.frame, "dataframe_file.csv")
# the first thing you should do when starting any new project is to set
# your working directory. This means setting your R environment to the
# correct folder on your computer.
# to do this, we use the function "setwd()"
# go to the folder you wish to set your working directory to and copy/paste
# the folder path in setwd(). Remember to 1) encompass the path in quotations
# and 2) change the forward brackets to backwards brackets if necessary \ to /
setwd("C:/Users/cheun/OneDrive/Desktop/Ecology in R/Lesson 1 Introduction")
# now lets set up some dummy data from the last 2 lessons
# we won't change the dates using the lubridate package
# for this excersise
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
vector3 <- c("hello", "goodbye", "hi", "bye", "hey")
combine.columns <- cbind(vector1, vector2, vector3)
new.data.frame <- as.data.frame(combine.columns)
new.data.frame$ones <- 1
vector4 <- c(26, 39, 12, 5, 14)
new.data.frame$vector4 <- vector4
colnames(new.data.frame) <- c("col1", "col2", "col3", "col4", "col5")
dates <- c("13/10/2019", "14/10/2019", "15/10/2019",
"16/10/2019", "17/10/2019")
new.data.frame$dates <- dates
# lets save this new data frame we created in our folder as a .csv file
# we do this using the write.csv() function, with our data frame's name
# first, followed by what we want the file name to be called
# NOTE: don't forget to add .csv to the file name!
write.csv(new.data.frame, "dataframe_file.csv")
getwd()
list.files() # find the file we just made called "dataframe_file.csv"
dat <- read.csv("dataframe_file.csv") #copy/paste the data in the function
View(dat) #make sure our import worked properly
View(dat)
View(dat.1)
View(dat)
View(new.data.frame)
View(dat)
View(new.data.frame)
View(dat)
View(new.data.frame)
# now that we've installed the package, it is saved in R and never needs
# to be installed again! However, we do have to "open" the package by calling
# "library()" this needs to be done each time we open R
# Note: the library() function doesn't require quotations around the package
library(ggplot2)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
# next, we will recreate our dataframe from the first lesson
# by copying and pasting the relevant code we learned
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
vector3 <- c("hello", "goodbye", "hi", "bye", "hey")
combine.columns <- cbind(vector1, vector2, vector3)
new.data.frame <- as.data.frame(combine.columns)
new.data.frame$ones <- 1
vector4 <- c(26, 39, 12, 5, 14)
new.data.frame$vector4 <- vector4
colnames(new.data.frame) <- c("col1", "col2", "col3", "col4", "col5")
# first we will use Base R to make a bar plot
barplot(new.data.frame$col5) # make a simple barplot of col5 values
View(new.data.frame)
# what about col3 (x) and col5 (y), for this we use "~"
barplot(new.data.frame$col5 ~ new.data.frame$col3)
# lets give it a title and change the x and y labels
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label")
# one of our bars seems to be extending over the y limitation
# lets change the y limitation to 50 instead
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
# now lets plot them side by side by dividing the window into a
# 1 row by 2 column frame using the "par()" function
# and the "mfrow = " argument
par(mfrow = c(1,2))
# plot 1
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#n plot 2
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
# how about visualizing all of our data at once?
# We can plot any data with the simple function plot()
plot(new.data.frame) #meaningless dot plots
# plot 1
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#n plot 2
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
# now lets plot them side by side by dividing the window into a
# 1 row by 2 column frame using the "par()" function
# and the "mfrow = " argument
par(mfrow = c(1,2))
# what about col3 (x) and col5 (y), for this we use "~"
barplot(new.data.frame$col5 ~ new.data.frame$col3)
# lets give it a title and change the x and y labels
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label")
# one of our bars seems to be extending over the y limitation
# lets change the y limitation to 50 instead
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
xlim = c(0,50))
# now lets plot them side by side by dividing the window into a
# 1 row by 2 column frame using the "par()" function
# and the "mfrow = " argument
par(mfrow = c(1,2))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
xlim = c(0,50))
# one of our bars seems to be extending over the y limitation
# lets change the y limitation to 50 instead
barplot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
#now lets use a simple plot function to see what it does
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50),
xlim = c(0,50))
range(new.data.frame$col3)
range(new.data.frame$col5)
plot(new.data.frame$col5 ~ new.data.frame$col3,
main = "this is the plot title",
xlab = "this is the x-label",
ylab = "this is the y-label",
ylim = c(0,50))
range(new.data.frame$col3)
# how about visualizing all of our data at once?
# We can plot any data with the simple function plot()
plot(new.data.frame) #meaningless dot plots
# So now lets go over the use of ggplot. We will start with a barplot
# in order to see how the functions work, we need to use the "help" script
# to view the help script, we can add a question mark "?" before the function
?ggplot() #run this line to see the help script for ggplot
# For the ggplot function, we can see that the first thing we need to do
# is to call our dataframe
# the second is to call the columns we will be using as the x and y axis
# these columns should be named within the aes() or "aesthetic" argument
# lets make a plot with the x axis as col3 elements, and y axis as col5 values
ggplot(new.data.frame, aes(x=col3, y=col5))
# notice that we've created a plot, but have no data plotted?
# in order to plot data we have to "add" an argument of what kind of plot
# we would like to make
# lets make a barplot first
ggplot(new.data.frame, aes(x=col3, y=col5)) + geom_bar()
# notice that we've created a plot, but have no data plotted?
# in order to plot data we have to "add" an argument of what kind of plot
# we would like to make
# lets make a barplot first
ggplot(new.data.frame, aes(x=col) + geom_bar()
# notice that we've created a plot, but have no data plotted?
# in order to plot data we have to "add" an argument of what kind of plot
# we would like to make
# lets make a barplot first
ggplot(new.data.frame, aes(x=col) + geom_bar()
# notice that we've created a plot, but have no data plotted?
# in order to plot data we have to "add" an argument of what kind of plot
# we would like to make
# lets make a barplot first
ggplot(new.data.frame, aes(x=col) + geom_bar(stat = "count")
# notice that we've created a plot, but have no data plotted?
# in order to plot data we have to "add" an argument of what kind of plot
# we would like to make
# lets make a barplot first
ggplot(new.data.frame, aes(x=col) + geom_bar(stat = "count")
# OH NO! WE GOT AN ERROR!
# This error signifies that the function "geom_bar" uses a count
# or cumulative sum function for its default.
# Since our data col5 has values associated col3, we need to set
# the geom bar to "stat = "identity""
ggplot(new.data.frame, aes(x=col3, y=col5)) + geom_bar(stat = "identity")
# much better! now lets add some color by adding our col3 value to the
# "col" argument in the ggplot aesthetic
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3)) +
geom_bar(stat = "identity")
# See how the color only outlines the bars? That's because for geom_bar
# the aesthetic you want to fill the bars is the argument "fill"
ggplot(new.data.frame, aes(x=col3, y=col5, fill = col3)) +
geom_bar(stat = "identity")
# So now lets make this a dot plot instead of a barplot.
# we do this by replacing geom_bar() with geom_point()
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3)) +
geom_point(stat = "identity")
#those dots are small, lets make the size bigger
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3, size = 20)) +
geom_point(stat = "identity")
# lets add x and y axis bars and eliminate the backrground grid
# we do this by adding a theme_classic function
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3, size = 20)) +
geom_point(stat = "identity") +
theme_classic()
# That black size dot in the legend is ugly, lets remove it
# by setting it to FALSE in the guides
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3, size = 20)) +
geom_point(stat = "identity") +
theme_classic() +
guides(size = FALSE)
# now lets add some custom labels by using the theme() function
ggplot(new.data.frame, aes(x=col3, y=col5, col = col3, size = 20)) +
geom_point(stat = "identity") +
theme_classic() +
guides(size = FALSE) +
# this changes the main title
ggtitle("Number of greetings - dots") +
#this centers the main title
theme(plot.title = element_text(hjust = 0.5)) +
# this changes the y label
ylab("quantity") +
# this changes the x label
xlab("greetings") +
# this changes the legend title for color
labs(col = "greeting")
# lets save this plot as an object called p1 for "plot 1"
p1 <- ggplot(new.data.frame, aes(x=col3, y=col5, col = col3, size = 20)) +
geom_point(stat = "identity") +
theme_classic() +
guides(size = FALSE) +
ggtitle("Number of greetings - dots") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("quantity") +
xlab("greetings") +
labs(col = "greeting")
# lets make a bar plot with the same modified code and save it as p2
# remember to change the color "col" aesthetic back to fill and remove the
# size aesthetic, as it isn't necessary
p2 <- ggplot(new.data.frame, aes(x=col3, y=col5, fill = col3)) +
geom_bar(stat = "identity") +
theme_classic() +
guides(size = FALSE) +
ggtitle("Number of greetings - bars") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("quantity") +
xlab("greetings") +
labs(fill = "greeting")
View(p2)
View(p1)
View(p2)
View(p1)
View(p2)
View(p1)
View(p2)
View(p1)
View(p2)
# lets make a bar plot with the same modified code and save it as p2
# remember to change the color "col" aesthetic back to fill and remove the
# size aesthetic, as it isn't necessary
p2 <- ggplot(new.data.frame, aes(x=col3, y=col5, fill = col3)) +
geom_bar(stat = "identity") +
theme_classic() +
guides(size = FALSE) +
ggtitle("Number of greetings - bars") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("quantity") +
xlab("greetings") +
labs(fill = "greeting")
# now lets visualize the two plots side-by-side, to do this with ggplot
# we need to make a grid using the package "cowplot" using the
# function plot_grid()
install.packages("cowplot")
library(cowplot)
# now we will plot p1 and p2 side-by-side using plot_grid() and label them
# with a, and b, grid labels using the "label = auto" argument
plot_grid(p1, p2, labels = "auto")
# we can see that plpt_grid has an argument to plot by rows "nrow"
# and columns "ncol". Lets plot another grid, but this time with p1
# on top and p2 on the bottom
plot_grid(p1, p2, nrow = 2, ncol = 1, labels = "auto")
